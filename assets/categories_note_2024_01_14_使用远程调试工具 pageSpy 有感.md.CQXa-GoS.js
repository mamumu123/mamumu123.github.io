import{_ as p}from"./chunks/ArticleMetadata.BvFr8T2G.js";import{_ as t,m as k,a as r,u as d,B as g,e as n,x as y,ai as o,o as h,p as A,q as c}from"./chunks/framework.Du4NMKL0.js";import"./chunks/theme.CTHdTMkE.js";const _=JSON.parse('{"title":"使用远程调试工具 pageSpy 有感","description":"","frontmatter":{"title":"使用远程调试工具 pageSpy 有感","author":"跑堂路过","date":"2023/05/21 09:07","categories":["技术笔记"],"tags":["JavaScript、canvas"]},"headers":[],"relativePath":"categories/note/2024/01/14/使用远程调试工具 pageSpy 有感.md","filePath":"categories/note/2024/01/14/使用远程调试工具 pageSpy 有感.md","lastUpdated":1714201284000}'),D={name:"categories/note/2024/01/14/使用远程调试工具 pageSpy 有感.md"},C=n("h1",{id:"使用远程调试工具-pagespy-有感",tabindex:"-1"},[y("使用远程调试工具 pageSpy 有感 "),n("a",{class:"header-anchor",href:"#使用远程调试工具-pagespy-有感","aria-label":'Permalink to "使用远程调试工具 pageSpy 有感"'},"​")],-1),F=o(`<h2 id="导论" tabindex="-1">导论 <a class="header-anchor" href="#导论" aria-label="Permalink to &quot;导论&quot;">​</a></h2><p>最近在V2EX和掘金网站上看到了PageSpy的推广和介绍。由于在自己工作的项目中也遇到了与远程调试相关的问题，因此对这个项目产生了兴趣。经过一番研究和实践，我大致理解了PageSpy的实现思路和原理，并在使用PageSpy小程序版本后遇到了一些问题。本文类似于一篇&quot;读后感&quot;，记录了我对PageSpy的理解和体验。</p><h2 id="关键词" tabindex="-1">关键词 <a class="header-anchor" href="#关键词" aria-label="Permalink to &quot;关键词&quot;">​</a></h2><p>pageSpy、远程调试、defineProperty、小程序</p><h2 id="pagespy-的介绍" tabindex="-1">pageSpy 的介绍 <a class="header-anchor" href="#pagespy-的介绍" aria-label="Permalink to &quot;pageSpy 的介绍&quot;">​</a></h2><h3 id="pagespy-是什么" tabindex="-1">pageSpy 是什么 <a class="header-anchor" href="#pagespy-是什么" aria-label="Permalink to &quot;pageSpy 是什么&quot;">​</a></h3><blockquote><p><strong>PageSpy</strong> 是一款用来调试远程 Web 项目的工具。基于对原生 API 的封装，它将调用原生方法时的参数进行过滤、转化，整理成格式规范的消息供调试端消费；调试端收到消息数据，提供类控制台可交互式的功能界面将数据呈现出来。</p></blockquote><h3 id="原理介绍" tabindex="-1">原理介绍 <a class="header-anchor" href="#原理介绍" aria-label="Permalink to &quot;原理介绍&quot;">​</a></h3><p>官方有一篇介绍<code>PageSpy</code>原理的文章，名为<a href="https://juejin.cn/post/7319512843174428684?searchId=20240114211547B4FB5BF4C2F9E66E638B" target="_blank" rel="noreferrer">前端远程调试工具 PageSpy 原理揭秘</a>。该项目分为用户端和服务端两部分。在用户端，我们需要接入SDK来完成对原生API的拦截。拦截到的信息会通过<code>WebSocket</code>发送给服务端。通过这种方式，业务开发人员可以在管理后台看到被拦截到的用户信息。</p><h4 id="如何拦截原生-api" tabindex="-1">如何拦截原生 API <a class="header-anchor" href="#如何拦截原生-api" aria-label="Permalink to &quot;如何拦截原生 API&quot;">​</a></h4><p>以小程序为例，SDK主要拦截了三组原生API：</p><ul><li>request（请求）；</li><li>console（控制台输入日志）</li><li>storage(本地存储）。</li></ul><p>在之前的版本中，官方是通过重写这些API来实现拦截功能。</p><h5 id="console" tabindex="-1">console <a class="header-anchor" href="#console" aria-label="Permalink to &quot;console&quot;">​</a></h5><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SpyConsole</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ProxyType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;log&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;info&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;warn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]; </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">    this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.console[item] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> window.console[item]; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 对原生方法进行包装（重写） </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    window.console[item] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> { </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">        // ... </span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><p>然而，这种方式可能会导致问题，特别是当开发者在项目中使用Object.defineProperty对原生API进行了get拦截，但没有设置set时，可能会导致错误。因此，官方最新版本中也采用了Object.defineProperty来完成拦截操作。这种方式可以更好地处理拦截过程中可能出现的异常情况。</p><div class="language-javascript vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">javascript</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> type</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> SpyConsole</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">ProxyType</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;log&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;info&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;error&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;warn&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">type.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">  this</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.console[item] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> globalThis.console[item];</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(globalThis.console, item, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">...</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">args</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[]) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    configurable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    enumerable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    writable: </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">true</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><h5 id="request" tabindex="-1">request <a class="header-anchor" href="#request" aria-label="Permalink to &quot;request&quot;">​</a></h5><p>对于网络请求，拦截方式也是类似的。小程序中，通过使用<code>wx.request</code>方法来发起HTTPS网络请求。以下是一个示例：</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">wx.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">request</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  url: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;example.php&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//仅为示例，并非真实的接口地址</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  data: {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    x: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    y: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;&#39;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  header: {</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">    &#39;content-type&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;application/json&#39;</span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;"> // 默认值</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  success</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    console.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">log</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(res.data)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">})</span></span></code></pre></div><p>PageSpy对<code>wx.request</code>进行拦截，并进行格式化处理。在<code>complete</code>回调函数中，PageSpy会发起WebSocket请求，将请求信息同步到服务端。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperty</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(wx, </span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;request&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">  value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">typeof</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> wx.request&gt;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]) {</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> originOnSuccess</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> params.success;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> originOnFailed</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> params.fail;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> originOnComplete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> params.complete;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    params.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">success</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      originOnSuccess</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">?.(res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    params.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">fail</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">err</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      originOnFailed</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">?.(err);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    params.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">complete</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> function</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">res</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> any</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // ...</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">      // that.sendRequestItem(id, req);</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">      originOnComplete</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">?.(res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    };</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> requestInstance</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> originRequest</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(params);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> requestInstance;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  }</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><h5 id="storage" tabindex="-1">storage <a class="header-anchor" href="#storage" aria-label="Permalink to &quot;storage&quot;">​</a></h5><p>PageSpy还对storage进行了类似的处理。它监听了能够对storage进行修改的API，如<code>setStorage</code>、<code>removeStorage</code>、<code>clearStorage</code>、<code>batchSetStorage</code>等。在这些API的成功回调函数中，PageSpy将数据同步到服务端。这样，开发者可以实时查看和分析存储数据的变化情况。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">Object.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">defineProperties</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(wx, {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  setStorage: {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">    value</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">params</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;"> Parameters</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">&lt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#F69D50;">WXStorageAPI</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">[</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">&#39;setStorage&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]&gt;[</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">]) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">      return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> StoragePlugin.originFunctions</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">setStorage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">({</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">        ...</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">params,</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">        success</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">res</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">          sendSetItem</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(params.key, params.data);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          params.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">success</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">?.(res);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">      });</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  },</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  removeStorage:{}</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  clearStorage: {}</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">  // ...</span></span></code></pre></div><h2 id="读后感" tabindex="-1">读后感 <a class="header-anchor" href="#读后感" aria-label="Permalink to &quot;读后感&quot;">​</a></h2><p>以上代码展示了PageSpy的核心原理：拦截用户端的网络请求、控制台日志和存储操作，并将这些信息同步到管理后台进行展示。 当然代码中还存在许多细节的处理。例如，对于控制台打印的特殊格式内容（如无法直接字符化的对象，如window），需要进行保存并同步到服务端的处理方式；另外，虽然只监听了<code>set</code>操作，但对于存储的初始化也需要考虑，以确保数据的完整性和一致性。这些细致的处理使得项目更加完善和可靠。</p><h3 id="项目的优点" tabindex="-1">项目的优点 <a class="header-anchor" href="#项目的优点" aria-label="Permalink to &quot;项目的优点&quot;">​</a></h3><ul><li>项目维护活跃，迭代速度快，有专人负责解答问题，用户可以获得及时的支持和反馈；</li><li>提供了丰富的接入方式，如Docker、Node.js等，使得验证和使用非常方便；</li></ul><h3 id="存在问题" tabindex="-1">存在问题 <a class="header-anchor" href="#存在问题" aria-label="Permalink to &quot;存在问题&quot;">​</a></h3><ul><li>并非所有项目都适合直接引入PageSpy，因为可能存在与项目中已有的请求拦截或控制台拦截逻辑冲突的情况：如果自己的项目中或者引入的第三方库已经存在了一些 request、console 的拦截，那么就会存在冲突，无法直接引入;</li><li>小程序项目刚刚发布，并不稳定;</li></ul><h3 id="总结" tabindex="-1">总结 <a class="header-anchor" href="#总结" aria-label="Permalink to &quot;总结&quot;">​</a></h3><p>这个项目确实非常出色。如果你也遇到了需要进行远程调试的场景，我建议你尝试接入该项目。官方提供了多种接入方式，使得尝试的成本相对较低。你可以根据自己的需求选择适合的接入方式，并享受到远程调试带来的便利。</p><h2 id="参考" tabindex="-1">参考 <a class="header-anchor" href="#参考" aria-label="Permalink to &quot;参考&quot;">​</a></h2><p><a href="https://developers.weixin.qq.com/miniprogram/dev/api/network/request/RequestTask.html" target="_blank" rel="noreferrer">微信官方-Request</a></p><p><a href="https://www.pagespy.org/docs#when-to-use" target="_blank" rel="noreferrer">page-spy 官方</a></p><p><a href="https://juejin.cn/post/7319512843174428684?searchId=20240114211547B4FB5BF4C2F9E66E638B" target="_blank" rel="noreferrer">前端远程调试工具 PageSpy 原理揭秘</a></p>`,37);function B(s,E,u,m,b,P){const e=p,l=k("ClientOnly");return h(),r("div",null,[C,d(l,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(h(),A(e,{key:0,article:s.$frontmatter},null,8,["article"])):c("",!0)]}),_:1}),F])}const v=t(D,[["render",B]]);export{_ as __pageData,v as default};
