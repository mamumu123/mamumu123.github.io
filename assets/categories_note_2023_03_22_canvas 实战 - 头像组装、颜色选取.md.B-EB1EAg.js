import{_ as e}from"./chunks/ArticleMetadata.DAM71pYO.js";import{_ as k,m as p,a as r,u as d,B as g,e as h,x as o,ai as C,o as t,p as c,q as y}from"./chunks/framework.CGiSzFLN.js";import"./chunks/theme.DU4aFPxK.js";const w=JSON.parse('{"title":"canvas 实战 - 头像组装、颜色选取","description":"","frontmatter":{"title":"canvas 实战 - 头像组装、颜色选取","author":"跑堂路过","date":"2023/03/22 09:07","categories":["技术笔记"],"tags":["JavaScript、canvas"]},"headers":[],"relativePath":"categories/note/2023/03/22/canvas 实战 - 头像组装、颜色选取.md","filePath":"categories/note/2023/03/22/canvas 实战 - 头像组装、颜色选取.md","lastUpdated":1714199835000}'),A={name:"categories/note/2023/03/22/canvas 实战 - 头像组装、颜色选取.md"},D=h("h1",{id:"canvas-实战-头像组装、颜色选取",tabindex:"-1"},[o("canvas 实战 - 头像组装、颜色选取 "),h("a",{class:"header-anchor",href:"#canvas-实战-头像组装、颜色选取","aria-label":'Permalink to "canvas 实战 - 头像组装、颜色选取"'},"​")],-1),m=C(`<h2 id="背景" tabindex="-1">背景 <a class="header-anchor" href="#背景" aria-label="Permalink to &quot;背景&quot;">​</a></h2><blockquote><p>一句话描述，用 <code>canvas.drawImage</code> 实现头像拼接，图片增加装饰，获取图片点击处颜色等功能；</p></blockquote><h3 id="关键词" tabindex="-1">关键词 <a class="header-anchor" href="#关键词" aria-label="Permalink to &quot;关键词&quot;">​</a></h3><p>canvas、drawImage、 demo、头像拼接、颜色选取</p><h3 id="项目背景" tabindex="-1">项目背景 <a class="header-anchor" href="#项目背景" aria-label="Permalink to &quot;项目背景&quot;">​</a></h3><p><img src="https://github.com/mamumu123/picx-images-hosting/raw/master/a.5mnlvklw15.webp" alt=""></p><p>在玩蛋仔派对的时候，觉得换肤很有意思。在逛开源社区的时候，看到了用 <code>canvas.drawImage</code> 实现同样效果的项目（<a href="https://github.com/lxdao-official/gclx-official" target="_blank" rel="noreferrer">gclx-official</a>）。</p><p>继续逛下去发现有很多场景的实现原理都是相同的。</p><h3 id="drawimage" tabindex="-1">drawImage <a class="header-anchor" href="#drawimage" aria-label="Permalink to &quot;drawImage&quot;">​</a></h3><p><code>drawImage</code> 可以将图片绘制到画布上面。</p><h4 id="api-介绍" tabindex="-1">api 介绍 <a class="header-anchor" href="#api-介绍" aria-label="Permalink to &quot;api 介绍&quot;">​</a></h4><p>重载了三种函数入参，可以设置图片的宽高和对原始图片的裁剪。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//在画布上定位图像：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(image, dx, dy);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// 在画布上定位图像，并规定图像的宽度和高度：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(image, dx, dy, dWidth, dHeight);</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">//剪切图像，并在画布上定位被剪切的部分：</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</span></span></code></pre></div><h4 id="一个最简单的-demo" tabindex="-1">一个最简单的 demo <a class="header-anchor" href="#一个最简单的-demo" aria-label="Permalink to &quot;一个最简单的 demo&quot;">​</a></h4><p>先创建一个 image 元素</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> loadImage</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> (</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">src</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> string</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">  new</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">reject</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">    const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> img</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> new</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> Image</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">();</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    img.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">onload</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> () </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> resolve</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(img);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    img.onerror </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> reject;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">    img.src </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> src;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  });</span></span></code></pre></div><p>在图片加载好以后，再调用 drawImage 函数，将图片绘制到画布中</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">ctx?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span></code></pre></div><p><img src="https://github.com/mamumu123/picx-images-hosting/raw/master/a.8z6bpyjq3w.webp" alt="3.png"></p><p>这样，一张图片就被画到画布上面了。</p><h2 id="拼接头像" tabindex="-1">拼接头像 <a class="header-anchor" href="#拼接头像" aria-label="Permalink to &quot;拼接头像&quot;">​</a></h2><p>体验地址：<a href="https://mamumu123.github.io/img-generate/" target="_blank" rel="noreferrer">头像拼接</a></p><p><img src="https://github.com/mamumu123/picx-images-hosting/raw/master/b.32hriy48fg.webp" alt="2.png"></p><p>如果要实现拼接头像的功能，就是将几张图片叠加绘制到画布上去。</p><h3 id="核心代码" tabindex="-1">核心代码 <a class="header-anchor" href="#核心代码" aria-label="Permalink to &quot;核心代码&quot;">​</a></h3><p>核心代码就两行</p><ol><li>加载需要的图片</li><li>将图片绘制到画布中</li></ol><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> imagesObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(images.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loadImage));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">imagesObj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ctx?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><p>其他的就是一些细节的调整，比如发型要放到画布最下面；每次渲染的时候需要清理一下画布等。</p><h2 id="节日气氛" tabindex="-1">节日气氛 <a class="header-anchor" href="#节日气氛" aria-label="Permalink to &quot;节日气氛&quot;">​</a></h2><p>功能描述：就是在节日的时候，可以在头像上增加一些节日的装饰，增加节日气氛。体验地址：<a href="https://mamumu123.github.io/img-generate/flower" target="_blank" rel="noreferrer">节日气氛</a></p><p><img src="https://github.com/mamumu123/picx-images-hosting/raw/master/c.9gwdejn36g.webp" alt="4.png"></p><h3 id="核心代码-1" tabindex="-1">核心代码 <a class="header-anchor" href="#核心代码-1" aria-label="Permalink to &quot;核心代码&quot;">​</a></h3><p>主要还是将头像和装饰部分的图片按顺序绘制上去。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> images</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [imageUrl, imgSelect].</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">filter</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">i</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> !!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">i);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> imagesObj</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> await</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> Promise</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">all</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(images.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">map</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(loadImage));</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">imagesObj.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">forEach</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">((</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">item</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=&gt;</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">  ctx?.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">drawImage</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(item, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">0</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">200</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">});</span></span></code></pre></div><h2 id="颜色获取" tabindex="-1">颜色获取 <a class="header-anchor" href="#颜色获取" aria-label="Permalink to &quot;颜色获取&quot;">​</a></h2><p>功能描述：每次点击图片，背景色都会变成点击部分的颜色。截图：</p><p><img src="https://p1-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/341742877df14192a6b242af8dcc9a56~tplv-k3u1fbpfcp-watermark.image?" alt="5.png"></p><h3 id="核心代码-2" tabindex="-1">核心代码 <a class="header-anchor" href="#核心代码-2" aria-label="Permalink to &quot;核心代码&quot;">​</a></h3><p><code>getImageData</code> 可以获取 <code>canvas</code> 某一个点的坐标值和颜色值。</p><div class="language-js vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki shiki-themes github-light github-dark-dimmed vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;"> getColor</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(</span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">x</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#E36209;--shiki-dark:#F69D50;">y</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> number</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">) {</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> imageData</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> ctx</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">!</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">getImageData</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(x, y, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">1</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> pixel</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> imageData.data; </span><span style="--shiki-light:#6A737D;--shiki-dark:#768390;">// data： 类型为Uint8ClampedArray的一维数组，每四个数组元素代表了一个像素点的RGBA信息，每个元素数值介于0~255</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">          const</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> [</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">r</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">g</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">b</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;">aBefore</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">] </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> pixel;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> a</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> Math.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#DCBDFB;">round</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">(aBefore </span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">/</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> 255</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">          const</span><span style="--shiki-light:#005CC5;--shiki-dark:#6CB6FF;"> rgba</span><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;"> =</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;"> \`rgba(\${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">r</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">g</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">b</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">}, \${</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">a</span><span style="--shiki-light:#032F62;--shiki-dark:#96D0FF;">})\`</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F47067;">          return</span><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;"> {</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">            rgba,</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">          };</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#ADBAC7;">        }</span></span></code></pre></div><p>所以整个流程是这样子的：</p><ul><li>将图片绘制到 canvas 上</li><li>注册 canvas 的 click 事件</li><li>当监听到 <code>click</code> 事件，进行计算，获取点击所在的点在 canvas 上的坐标（x,y)</li><li>计算画布上坐标(x,y）的颜色值，将该值绘制到背景上</li></ul><h2 id="参考地址" tabindex="-1">参考地址 <a class="header-anchor" href="#参考地址" aria-label="Permalink to &quot;参考地址&quot;">​</a></h2><p><a href="https://www.runoob.com/tags/canvas-drawimage.html" target="_blank" rel="noreferrer">HTML canvas drawImage() 方法</a></p><h2 id="项目地址" tabindex="-1">项目地址： <a class="header-anchor" href="#项目地址" aria-label="Permalink to &quot;项目地址：&quot;">​</a></h2><p><a href="https://github.com/mamumu123/img-generate" target="_blank" rel="noreferrer">github</a></p><p>觉得有点意思就给个 star 吧。</p><h2 id="体验地址" tabindex="-1">体验地址： <a class="header-anchor" href="#体验地址" aria-label="Permalink to &quot;体验地址：&quot;">​</a></h2><p><a href="https://mamumu123.github.io/img-generate/" target="_blank" rel="noreferrer">头像拼接</a></p>`,50);function F(s,B,u,b,E,f){const n=e,l=p("ClientOnly");return t(),r("div",null,[D,d(l,null,{default:g(()=>{var i,a;return[(((i=s.$frontmatter)==null?void 0:i.aside)??!0)&&(((a=s.$frontmatter)==null?void 0:a.showArticleMetadata)??!0)?(t(),c(n,{key:0,article:s.$frontmatter},null,8,["article"])):y("",!0)]}),_:1}),m])}const q=k(A,[["render",F]]);export{w as __pageData,q as default};
